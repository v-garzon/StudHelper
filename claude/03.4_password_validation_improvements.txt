# StudHelper - Password Validation & User Display Improvements
# 1. Password confirmation (must match)
# 2. Password strength indicator (red/yellow/green)
# 3. Password requirements: 1 uppercase, 3 numbers, 6 chars minimum
# 4. Better error messages (registration & login)
# 5. User alias/name display in dashboard header

# ============================================================================
# FRONTEND FILES
# ============================================================================

### MODIFIED FILE: Vue-Frontend/src/components/features/landing/RegisterForm.vue
<template>
  <div class="bg-white p-8 rounded-2xl shadow-lg">
    <h2 class="text-2xl font-bold text-gray-900 mb-6">Create Account</h2>
    
    <!-- OAuth Buttons -->
    <div class="space-y-3 mb-6">
      <button
        @click="handleGoogleSignup"
        :disabled="isLoading"
        class="w-full flex items-center justify-center gap-3 px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <svg class="w-5 h-5" viewBox="0 0 24 24">
          <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
          <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
          <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
          <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
        </svg>
        <span class="text-gray-700 font-medium">Continue with Google</span>
      </button>

      <button
        @click="handleMicrosoftSignup"
        :disabled="isLoading"
        class="w-full flex items-center justify-center gap-3 px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <svg class="w-5 h-5" viewBox="0 0 23 23">
          <path fill="#f3f3f3" d="M0 0h23v23H0z"/>
          <path fill="#f35325" d="M1 1h10v10H1z"/>
          <path fill="#81bc06" d="M12 1h10v10H12z"/>
          <path fill="#05a6f0" d="M1 12h10v10H1z"/>
          <path fill="#ffba08" d="M12 12h10v10H12z"/>
        </svg>
        <span class="text-gray-700 font-medium">Continue with Microsoft</span>
      </button>
    </div>

    <div class="relative mb-6">
      <div class="absolute inset-0 flex items-center">
        <div class="w-full border-t border-gray-300"></div>
      </div>
      <div class="relative flex justify-center text-sm">
        <span class="px-2 bg-white text-gray-500">Or continue with email</span>
      </div>
    </div>
    
    <!-- Email/Password Form -->
    <form @submit.prevent="handleEmailSubmit" class="space-y-4">
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
            Name
          </label>
          <input
            id="name"
            v-model="form.name"
            type="text"
            required
            class="input-field"
            placeholder="First name"
          />
        </div>

        <div>
          <label for="surname" class="block text-sm font-medium text-gray-700 mb-1">
            Surname
          </label>
          <input
            id="surname"
            v-model="form.surname"
            type="text"
            required
            class="input-field"
            placeholder="Last name"
          />
        </div>
      </div>

      <div>
        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
          Email
        </label>
        <input
          id="email"
          v-model="form.email"
          type="email"
          required
          class="input-field"
          placeholder="Enter your email"
          @blur="validateEmail"
        />
        <p v-if="emailError" class="text-red-600 text-xs mt-1">
          {{ emailError }}
        </p>
      </div>

      <div>
        <label for="alias" class="block text-sm font-medium text-gray-700 mb-1">
          Alias <span class="text-gray-500 text-xs">(optional)</span>
        </label>
        <input
          id="alias"
          v-model="form.alias"
          type="text"
          class="input-field"
          placeholder="How you'd like to be called"
        />
        <p class="text-xs text-gray-500 mt-1">
          If set, this is how you'll be displayed. Otherwise we'll use your full name.
        </p>
      </div>

      <div>
        <label for="password" class="block text-sm font-medium text-gray-700 mb-1">
          Password
        </label>
        <input
          id="password"
          v-model="form.password"
          type="password"
          required
          class="input-field"
          placeholder="Create a password"
          @input="checkPasswordStrength"
        />
        
        <!-- Password Strength Indicator -->
        <div v-if="form.password" class="mt-2">
          <div class="flex items-center gap-2 mb-1">
            <div class="flex-1 h-1.5 bg-gray-200 rounded-full overflow-hidden">
              <div 
                :class="[
                  'h-full transition-all duration-300',
                  passwordStrength.color === 'red' ? 'bg-red-500 w-1/3' : '',
                  passwordStrength.color === 'yellow' ? 'bg-yellow-500 w-2/3' : '',
                  passwordStrength.color === 'green' ? 'bg-green-500 w-full' : ''
                ]"
              ></div>
            </div>
            <span 
              :class="[
                'text-xs font-medium',
                passwordStrength.color === 'red' ? 'text-red-600' : '',
                passwordStrength.color === 'yellow' ? 'text-yellow-600' : '',
                passwordStrength.color === 'green' ? 'text-green-600' : ''
              ]"
            >
              {{ passwordStrength.label }}
            </span>
          </div>
          
          <!-- Password Requirements -->
          <div class="space-y-1 text-xs">
            <div :class="passwordRequirements.minLength ? 'text-green-600' : 'text-gray-500'">
              <span>{{ passwordRequirements.minLength ? '✓' : '○' }}</span>
              At least 6 characters
            </div>
            <div :class="passwordRequirements.hasUppercase ? 'text-green-600' : 'text-gray-500'">
              <span>{{ passwordRequirements.hasUppercase ? '✓' : '○' }}</span>
              At least 1 uppercase letter
            </div>
            <div :class="passwordRequirements.hasNumbers ? 'text-green-600' : 'text-gray-500'">
              <span>{{ passwordRequirements.hasNumbers ? '✓' : '○' }}</span>
              At least 3 numbers
            </div>
          </div>
        </div>
      </div>

      <div>
        <label for="confirmPassword" class="block text-sm font-medium text-gray-700 mb-1">
          Confirm Password
        </label>
        <input
          id="confirmPassword"
          v-model="form.confirmPassword"
          type="password"
          required
          class="input-field"
          placeholder="Re-enter your password"
          @input="checkPasswordMatch"
        />
        <p v-if="passwordMatchError && form.confirmPassword" class="text-red-600 text-xs mt-1">
          {{ passwordMatchError }}
        </p>
        <p v-if="!passwordMatchError && form.confirmPassword && form.password === form.confirmPassword" class="text-green-600 text-xs mt-1">
          ✓ Passwords match
        </p>
      </div>

      <div v-if="error" class="bg-red-50 border border-red-200 rounded-lg p-3">
        <p class="text-red-800 text-sm font-medium">{{ error }}</p>
      </div>

      <div v-if="successMessage" class="bg-green-50 border border-green-200 rounded-lg p-3">
        <p class="text-green-800 text-sm font-medium">{{ successMessage }}</p>
      </div>

      <button 
        type="submit" 
        :disabled="isLoading || !isFormValid"
        class="w-full btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <span v-if="isLoading">Creating account...</span>
        <span v-else>Register with Email</span>
      </button>
    </form>

    <div class="mt-6 text-center space-y-2">
      <button 
        @click="$emit('switch-to-login')"
        class="text-primary-600 hover:text-primary-700 font-medium"
      >
        Already have an account? Login
      </button>
      <br>
      <button 
        @click="$emit('cancel')"
        class="text-gray-600 hover:text-gray-700"
      >
        Back
      </button>
    </div>
  </div>
</template>

<script setup>
import { ref, computed } from 'vue'
import { useAuthStore } from '@/stores/auth'
import { 
  auth, 
  googleProvider, 
  microsoftProvider, 
  signInWithPopup,
  createUserWithEmailAndPassword,
  sendEmailVerification
} from '@/config/firebase'

const emit = defineEmits(['success', 'switch-to-login', 'cancel'])

const authStore = useAuthStore()
const form = ref({
  name: '',
  surname: '',
  email: '',
  alias: '',
  password: '',
  confirmPassword: ''
})
const error = ref('')
const emailError = ref('')
const passwordMatchError = ref('')
const successMessage = ref('')
const isLoading = ref(false)

const passwordRequirements = ref({
  minLength: false,
  hasUppercase: false,
  hasNumbers: false
})

const passwordStrength = ref({
  color: 'red',
  label: 'Weak'
})

// Email validation
const validateEmail = () => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  if (form.value.email && !emailRegex.test(form.value.email)) {
    emailError.value = 'Please enter a valid email address'
  } else {
    emailError.value = ''
  }
}

// Password strength checker
const checkPasswordStrength = () => {
  const password = form.value.password
  
  // Check requirements
  passwordRequirements.value.minLength = password.length >= 6
  passwordRequirements.value.hasUppercase = /[A-Z]/.test(password)
  passwordRequirements.value.hasNumbers = (password.match(/\d/g) || []).length >= 3
  
  // Calculate strength
  const meetsBasicRequirements = 
    passwordRequirements.value.minLength && 
    passwordRequirements.value.hasUppercase && 
    passwordRequirements.value.hasNumbers
  
  const hasSpecialChars = /[!@#$%^&*(),.?":{}|<>]/.test(password)
  const isLong = password.length >= 10
  
  if (!meetsBasicRequirements) {
    passwordStrength.value = { color: 'red', label: 'Weak' }
  } else if (hasSpecialChars && isLong) {
    passwordStrength.value = { color: 'green', label: 'Strong' }
  } else {
    passwordStrength.value = { color: 'yellow', label: 'Medium' }
  }
}

// Password match checker
const checkPasswordMatch = () => {
  if (form.value.confirmPassword && form.value.password !== form.value.confirmPassword) {
    passwordMatchError.value = 'Passwords do not match'
  } else {
    passwordMatchError.value = ''
  }
}

// Form validation
const isFormValid = computed(() => {
  return (
    form.value.name &&
    form.value.surname &&
    form.value.email &&
    !emailError.value &&
    form.value.password &&
    form.value.confirmPassword &&
    form.value.password === form.value.confirmPassword &&
    passwordRequirements.value.minLength &&
    passwordRequirements.value.hasUppercase &&
    passwordRequirements.value.hasNumbers
  )
})

// Email/Password Registration
const handleEmailSubmit = async () => {
  // Final validation
  if (!isFormValid.value) {
    error.value = 'Please fill all required fields correctly'
    return
  }

  isLoading.value = true
  error.value = ''
  successMessage.value = ''
  
  try {
    // Step 1: Create Firebase account
    const userCredential = await createUserWithEmailAndPassword(
      auth, 
      form.value.email, 
      form.value.password
    )
    
    // Step 2: Send verification email
    await sendEmailVerification(userCredential.user)
    successMessage.value = 'Verification email sent! Please check your inbox.'
    
    // Step 3: Get Firebase ID token
    const idToken = await userCredential.user.getIdToken()
    
    // Step 4: Send to backend with name, surname, and alias
    const result = await authStore.firebaseLogin({
      idToken: idToken,
      name: form.value.name,
      surname: form.value.surname,
      alias: form.value.alias || null
    })
    
    if (result.success) {
      emit('success')
    } else {
      error.value = result.message
    }
  } catch (err) {
    console.error('Registration error:', err)
    
    // Detailed error messages
    if (err.code === 'auth/email-already-in-use') {
      // Try to determine OAuth provider
      const provider = await getEmailProvider(form.value.email)
      if (provider) {
        error.value = `This email is already registered with ${provider}. Please sign in using that method.`
      } else {
        error.value = 'This email is already registered. Please login instead or use "Forgot Password" if you need to reset it.'
      }
    } else if (err.code === 'auth/weak-password') {
      error.value = 'Password does not meet requirements. Please ensure it has at least 6 characters, 1 uppercase letter, and 3 numbers.'
    } else if (err.code === 'auth/invalid-email') {
      error.value = 'Invalid email format. Please check your email address.'
    } else if (err.code === 'auth/operation-not-allowed') {
      error.value = 'Email/password registration is currently disabled. Please contact support.'
    } else if (err.response?.data?.detail) {
      error.value = err.response.data.detail
    } else {
      error.value = 'Registration failed: ' + (err.message || 'Unknown error occurred. Please try again.')
    }
  } finally {
    isLoading.value = false
  }
}

// Helper to get OAuth provider if email exists
const getEmailProvider = async (email) => {
  try {
    const { fetchSignInMethodsForEmail } = await import('firebase/auth')
    const methods = await fetchSignInMethodsForEmail(auth, email)
    if (methods.includes('google.com')) return 'Google'
    if (methods.includes('microsoft.com')) return 'Microsoft'
    return null
  } catch {
    return null
  }
}

// Google OAuth
const handleGoogleSignup = async () => {
  isLoading.value = true
  error.value = ''
  
  try {
    const result = await signInWithPopup(auth, googleProvider)
    const idToken = await result.user.getIdToken()
    
    const loginResult = await authStore.firebaseLogin(idToken)
    
    if (loginResult.success) {
      emit('success')
    } else {
      error.value = loginResult.message
    }
  } catch (err) {
    console.error('Google signup error:', err)
    if (err.code === 'auth/popup-closed-by-user') {
      error.value = 'Sign-up cancelled. Please try again.'
    } else if (err.code === 'auth/account-exists-with-different-credential') {
      error.value = 'An account already exists with this email using a different sign-in method. Please use that method to login.'
    } else if (err.code === 'auth/popup-blocked') {
      error.value = 'Popup was blocked by your browser. Please allow popups for this site.'
    } else {
      error.value = 'Google sign-up failed: ' + (err.message || 'Unknown error')
    }
  } finally {
    isLoading.value = false
  }
}

// Microsoft OAuth
const handleMicrosoftSignup = async () => {
  isLoading.value = true
  error.value = ''
  
  try {
    const result = await signInWithPopup(auth, microsoftProvider)
    const idToken = await result.user.getIdToken()
    
    const loginResult = await authStore.firebaseLogin(idToken)
    
    if (loginResult.success) {
      emit('success')
    } else {
      error.value = loginResult.message
    }
  } catch (err) {
    console.error('Microsoft signup error:', err)
    if (err.code === 'auth/popup-closed-by-user') {
      error.value = 'Sign-up cancelled. Please try again.'
    } else if (err.code === 'auth/account-exists-with-different-credential') {
      error.value = 'An account already exists with this email using a different sign-in method. Please use that method to login.'
    } else if (err.code === 'auth/popup-blocked') {
      error.value = 'Popup was blocked by your browser. Please allow popups for this site.'
    } else {
      error.value = 'Microsoft sign-up failed: ' + (err.message || 'Unknown error')
    }
  } finally {
    isLoading.value = false
  }
}
</script>


### MODIFIED FILE: Vue-Frontend/src/components/features/landing/LoginForm.vue
<template>
  <div class="bg-white p-8 rounded-2xl shadow-lg">
    <h2 class="text-2xl font-bold text-gray-900 mb-6">Login</h2>
    
    <!-- OAuth Buttons -->
    <div class="space-y-3 mb-6">
      <button
        @click="handleGoogleLogin"
        :disabled="isLoading"
        class="w-full flex items-center justify-center gap-3 px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <svg class="w-5 h-5" viewBox="0 0 24 24">
          <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
          <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
          <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
          <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
        </svg>
        <span class="text-gray-700 font-medium">Continue with Google</span>
      </button>

      <button
        @click="handleMicrosoftLogin"
        :disabled="isLoading"
        class="w-full flex items-center justify-center gap-3 px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <svg class="w-5 h-5" viewBox="0 0 23 23">
          <path fill="#f3f3f3" d="M0 0h23v23H0z"/>
          <path fill="#f35325" d="M1 1h10v10H1z"/>
          <path fill="#81bc06" d="M12 1h10v10H12z"/>
          <path fill="#05a6f0" d="M1 12h10v10H1z"/>
          <path fill="#ffba08" d="M12 12h10v10H12z"/>
        </svg>
        <span class="text-gray-700 font-medium">Continue with Microsoft</span>
      </button>
    </div>

    <div class="relative mb-6">
      <div class="absolute inset-0 flex items-center">
        <div class="w-full border-t border-gray-300"></div>
      </div>
      <div class="relative flex justify-center text-sm">
        <span class="px-2 bg-white text-gray-500">Or continue with email</span>
      </div>
    </div>
    
    <!-- Email/Password Form -->
    <form @submit.prevent="handleEmailLogin" class="space-y-4">
      <div>
        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
          Email
        </label>
        <input
          id="email"
          v-model="form.email"
          type="email"
          required
          class="input-field"
          placeholder="Enter your email"
        />
      </div>

      <div>
        <label for="password" class="block text-sm font-medium text-gray-700 mb-1">
          Password
        </label>
        <input
          id="password"
          v-model="form.password"
          type="password"
          required
          class="input-field"
          placeholder="Enter your password"
        />
      </div>

      <div v-if="error" class="bg-red-50 border border-red-200 rounded-lg p-3">
        <p class="text-red-800 text-sm font-medium">{{ error }}</p>
      </div>

      <button 
        type="submit" 
        :disabled="isLoading"
        class="w-full btn-primary"
      >
        <span v-if="isLoading">Logging in...</span>
        <span v-else>Login</span>
      </button>
    </form>

    <div class="mt-6 text-center space-y-2">
      <button 
        @click="handleForgotPassword"
        class="text-primary-600 hover:text-primary-700 text-sm"
      >
        Forgot password?
      </button>
      <br>
      <button 
        @click="$emit('switch-to-register')"
        class="text-primary-600 hover:text-primary-700 font-medium"
      >
        Don't have an account? Register
      </button>
      <br>
      <button 
        @click="$emit('cancel')"
        class="text-gray-600 hover:text-gray-700"
      >
        Back
      </button>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { useAuthStore } from '@/stores/auth'
import { 
  auth, 
  googleProvider, 
  microsoftProvider, 
  signInWithPopup,
  signInWithEmailAndPassword,
  sendPasswordResetEmail
} from '@/config/firebase'

const emit = defineEmits(['success', 'switch-to-register', 'cancel'])

const authStore = useAuthStore()
const form = ref({
  email: '',
  password: ''
})
const error = ref('')
const isLoading = ref(false)

// Email/Password Login
const handleEmailLogin = async () => {
  isLoading.value = true
  error.value = ''
  
  try {
    // Firebase authenticates
    const userCredential = await signInWithEmailAndPassword(
      auth,
      form.value.email,
      form.value.password
    )
    
    // Get Firebase ID token
    const idToken = await userCredential.user.getIdToken()
    
    // Send to backend
    const result = await authStore.firebaseLogin(idToken)
    
    if (result.success) {
      emit('success')
    } else {
      error.value = result.message
    }
  } catch (err) {
    console.error('Login error:', err)
    
    // Detailed error messages
    if (err.code === 'auth/user-not-found') {
      error.value = 'No account found with this email address. Please check your email or register for a new account.'
    } else if (err.code === 'auth/wrong-password') {
      error.value = 'Incorrect password. Please try again or use "Forgot Password" to reset it.'
    } else if (err.code === 'auth/invalid-credential') {
      error.value = 'Invalid email or password. Please check your credentials and try again.'
    } else if (err.code === 'auth/too-many-requests') {
      error.value = 'Too many failed login attempts. Your account has been temporarily locked. Please try again later or reset your password.'
    } else if (err.code === 'auth/invalid-email') {
      error.value = 'Invalid email format. Please enter a valid email address.'
    } else if (err.code === 'auth/user-disabled') {
      error.value = 'This account has been disabled. Please contact support for assistance.'
    } else {
      error.value = 'Login failed: ' + (err.message || 'Unknown error occurred. Please try again.')
    }
  } finally {
    isLoading.value = false
  }
}

// Google OAuth
const handleGoogleLogin = async () => {
  isLoading.value = true
  error.value = ''
  
  try {
    const result = await signInWithPopup(auth, googleProvider)
    const idToken = await result.user.getIdToken()
    
    const loginResult = await authStore.firebaseLogin(idToken)
    
    if (loginResult.success) {
      emit('success')
    } else {
      error.value = loginResult.message
    }
  } catch (err) {
    console.error('Google login error:', err)
    if (err.code === 'auth/popup-closed-by-user') {
      error.value = 'Sign-in cancelled. Please try again.'
    } else if (err.code === 'auth/popup-blocked') {
      error.value = 'Popup was blocked by your browser. Please allow popups for this site and try again.'
    } else if (err.code === 'auth/account-exists-with-different-credential') {
      error.value = 'An account already exists with this email using a different sign-in method. Please use that method to login.'
    } else {
      error.value = 'Google login failed: ' + (err.message || 'Unknown error')
    }
  } finally {
    isLoading.value = false
  }
}

// Microsoft OAuth
const handleMicrosoftLogin = async () => {
  isLoading.value = true
  error.value = ''
  
  try {
    const result = await signInWithPopup(auth, microsoftProvider)
    const idToken = await result.user.getIdToken()
    
    const loginResult = await authStore.firebaseLogin(idToken)
    
    if (loginResult.success) {
      emit('success')
    } else {
      error.value = loginResult.message
    }
  } catch (err) {
    console.error('Microsoft login error:', err)
    if (err.code === 'auth/popup-closed-by-user') {
      error.value = 'Sign-in cancelled. Please try again.'
    } else if (err.code === 'auth/popup-blocked') {
      error.value = 'Popup was blocked by your browser. Please allow popups for this site and try again.'
    } else if (err.code === 'auth/account-exists-with-different-credential') {
      error.value = 'An account already exists with this email using a different sign-in method. Please use that method to login.'
    } else {
      error.value = 'Microsoft login failed: ' + (err.message || 'Unknown error')
    }
  } finally {
    isLoading.value = false
  }
}

// Password Reset
const handleForgotPassword = async () => {
  const email = prompt('Enter your email address to reset your password:')
  if (!email) return
  
  try {
    await sendPasswordResetEmail(auth, email)
    alert('✅ Password reset email sent! Please check your inbox and follow the instructions.')
  } catch (err) {
    if (err.code === 'auth/user-not-found') {
      alert('❌ No account found with this email address.')
    } else if (err.code === 'auth/invalid-email') {
      alert('❌ Invalid email address format.')
    } else {
      alert('❌ Error: ' + (err.message || 'Could not send reset email. Please try again.'))
    }
  }
}
</script>


### MODIFIED FILE: Vue-Frontend/src/components/features/dashboard/UserMenu.vue
<template>
  <div class="relative">
    <button
      @click="toggleMenu"
      class="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100 transition-colors"
    >
      <!-- User Name (only show if enough space - hidden on mobile) -->
      <span 
        v-if="displayName" 
        class="hidden lg:block text-sm font-medium text-gray-700 max-w-[150px] truncate"
      >
        {{ displayName }}
      </span>
      
      <!-- User Avatar Circle -->
      <div class="w-10 h-10 rounded-full bg-primary-500 flex items-center justify-center text-white font-semibold">
        {{ userInitial }}
      </div>
      
      <!-- Dropdown Arrow -->
      <svg 
        :class="['w-4 h-4 text-gray-500 transition-transform', isOpen ? 'rotate-180' : '']" 
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
      </svg>
    </button>

    <!-- Dropdown Menu -->
    <transition
      enter-active-class="transition ease-out duration-100"
      enter-from-class="transform opacity-0 scale-95"
      enter-to-class="transform opacity-100 scale-100"
      leave-active-class="transition ease-in duration-75"
      leave-from-class="transform opacity-100 scale-100"
      leave-to-class="transform opacity-0 scale-95"
    >
      <div
        v-if="isOpen"
        class="absolute right-0 mt-2 w-56 rounded-lg shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-50"
      >
        <div class="py-1">
          <!-- User Info -->
          <div class="px-4 py-3 border-b border-gray-100">
            <p class="text-sm font-medium text-gray-900">{{ fullDisplayName }}</p>
            <p class="text-xs text-gray-500 truncate">{{ userEmail }}</p>
          </div>

          <!-- Menu Items -->
          <button
            @click="handleProfile"
            class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            <span>Profile Settings</span>
          </button>

          <button
            @click="handleSettings"
            class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
            <span>Settings</span>
          </button>

          <div class="border-t border-gray-100"></div>

          <button
            @click="handleLogout"
            class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center space-x-2"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
            </svg>
            <span>Logout</span>
          </button>
        </div>
      </div>
    </transition>
  </div>
</template>

<script setup>
import { ref, computed, onMounted, onUnmounted } from 'vue'
import { useRouter } from 'vue-router'
import { useAuthStore } from '@/stores/auth'

const router = useRouter()
const authStore = useAuthStore()
const isOpen = ref(false)

const displayName = computed(() => authStore.displayName)
const fullDisplayName = computed(() => authStore.displayName || 'User')
const userEmail = computed(() => authStore.user?.email || '')
const userInitial = computed(() => {
  const name = authStore.displayName || authStore.user?.email || 'U'
  return name.charAt(0).toUpperCase()
})

const toggleMenu = () => {
  isOpen.value = !isOpen.value
}

const closeMenu = () => {
  isOpen.value = false
}

const handleProfile = () => {
  closeMenu()
  // TODO: Navigate to profile page
  console.log('Profile clicked')
}

const handleSettings = () => {
  closeMenu()
  // TODO: Navigate to settings page
  console.log('Settings clicked')
}

const handleLogout = async () => {
  closeMenu()
  authStore.logout()
  router.push({ name: 'Landing' })
}

// Close menu when clicking outside
const handleClickOutside = (event) => {
  const target = event.target
  if (!target.closest('.relative')) {
    closeMenu()
  }
}

onMounted(() => {
  document.addEventListener('click', handleClickOutside)
})

onUnmounted(() => {
  document.removeEventListener('click', handleClickOutside)
})
</script>


# ============================================================================
# BACKEND FILES
# ============================================================================

### MODIFIED FILE: Backend/app/services/auth_service.py
from sqlalchemy.orm import Session
from app.models import User
from app.schemas import UserCreate, UserUpdate, UserResponse, Token
from app.utils.security import get_password_hash, verify_password, create_access_token, validate_password_strength
from app.firebase_admin import verify_firebase_token
from datetime import timedelta
from app.config import get_settings
from typing import Optional
import logging

settings = get_settings()
logger = logging.getLogger(__name__)

class AuthService:
    
    def _get_display_name(self, user: User) -> str:
        """Get display name: alias if set, otherwise 'Name Surname'"""
        if user.alias:
            return user.alias
        return f"{user.name} {user.surname}"
    
    async def create_user(self, db: Session, user_data: UserCreate) -> UserResponse:
        """Create a new user with email/password (legacy method)"""
        # Check if email already exists
        existing_user = db.query(User).filter(User.email == user_data.email).first()
        if existing_user:
            raise ValueError("Email already registered")
        
        # Validate password strength
        password_validation = validate_password_strength(user_data.password)
        if not password_validation['valid']:
            raise ValueError(f"Password does not meet requirements: {', '.join(password_validation['errors'])}")
        
        # Create new user
        hashed_password = get_password_hash(user_data.password)
        new_user = User(
            email=user_data.email,
            name=user_data.name,
            surname=user_data.surname,
            alias=user_data.alias,
            hashed_password=hashed_password
        )
        
        db.add(new_user)
        db.commit()
        db.refresh(new_user)
        
        user_response = UserResponse.model_validate(new_user)
        user_response.display_name = self._get_display_name(new_user)
        return user_response
    
    async def authenticate_user(self, db: Session, email: str, password: str) -> Token:
        """Authenticate user with email/password (legacy method)"""
        user = db.query(User).filter(User.email == email).first()
        
        if not user:
            raise ValueError(f"No account found with email {email}")
        if not user.is_active:
            raise ValueError("Account is deactivated")
        if not user.hashed_password:
            raise ValueError("This account uses social login. Please sign in with Google or Microsoft.")
        if not verify_password(password, user.hashed_password):
            raise ValueError("Incorrect password")
        
        # Create JWT token with user.id as subject
        access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
        access_token = create_access_token(
            data={"sub": str(user.id)}, expires_delta=access_token_expires
        )
        
        user_response = UserResponse.model_validate(user)
        user_response.display_name = self._get_display_name(user)
        
        return Token(
            access_token=access_token,
            token_type="bearer",
            user=user_response
        )
    
    async def firebase_authenticate(self, db: Session, id_token: str, 
                                    name: Optional[str] = None,
                                    surname: Optional[str] = None,
                                    alias: Optional[str] = None) -> Token:
        """
        Authenticate user via Firebase token
        Creates user if first time, returns JWT token
        """
        # Step 1: Verify Firebase token
        try:
            decoded_token = verify_firebase_token(id_token)
        except ValueError as e:
            raise ValueError(f"Firebase authentication failed: {str(e)}")
        
        firebase_uid = decoded_token['uid']
        email = decoded_token.get('email')
        email_verified = decoded_token.get('email_verified', False)
        display_name = decoded_token.get('name', '')
        
        # Determine provider
        provider_data = decoded_token.get('firebase', {}).get('sign_in_provider', 'unknown')
        if provider_data == 'google.com':
            auth_provider = 'google'
        elif provider_data == 'microsoft.com':
            auth_provider = 'microsoft'
        elif provider_data == 'password':
            auth_provider = 'firebase_email'
        else:
            auth_provider = 'firebase'
        
        if not email:
            raise ValueError("Email not provided by Firebase")
        
        # Step 2: Check if user exists by firebase_uid
        user = db.query(User).filter(User.firebase_uid == firebase_uid).first()
        
        if user:
            # Existing Firebase user - update verification status
            user.email_verified = email_verified
            db.commit()
            db.refresh(user)
            logger.info(f"Existing Firebase user logged in: {email}")
        else:
            # Check if email already exists (user switching from email/password to OAuth)
            user = db.query(User).filter(User.email == email).first()
            
            if user:
                # Link existing account to Firebase
                logger.info(f"Linking existing account to Firebase: {email}")
                user.firebase_uid = firebase_uid
                user.auth_provider = auth_provider
                user.email_verified = email_verified
                db.commit()
                db.refresh(user)
            else:
                # New user - create account
                # Use provided name/surname or parse from display_name
                if not name or not surname:
                    # Try to split display_name from OAuth
                    name_parts = display_name.split(' ', 1) if display_name else ['User', 'Name']
                    name = name or name_parts[0]
                    surname = surname or (name_parts[1] if len(name_parts) > 1 else 'Unknown')
                
                user = User(
                    email=email,
                    name=name,
                    surname=surname,
                    alias=alias,
                    firebase_uid=firebase_uid,
                    auth_provider=auth_provider,
                    email_verified=email_verified,
                    hashed_password=None,
                    is_active=True
                )
                
                db.add(user)
                db.commit()
                db.refresh(user)
                
                logger.info(f"New Firebase user created: {email} via {auth_provider}")
        
        # Step 3: Create JWT token with user.id as subject
        access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
        access_token = create_access_token(
            data={"sub": str(user.id)}, expires_delta=access_token_expires
        )
        
        user_response = UserResponse.model_validate(user)
        user_response.display_name = self._get_display_name(user)
        
        return Token(
            access_token=access_token,
            token_type="bearer",
            user=user_response
        )
    
    async def update_user(self, db: Session, user_id: int, user_update: UserUpdate) -> UserResponse:
        """Update user profile"""
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise ValueError("User not found")
        
        update_data = user_update.model_dump(exclude_unset=True)
        
        # Check email uniqueness if email is being updated
        if "email" in update_data:
            existing_user = db.query(User).filter(
                User.email == update_data["email"],
                User.id != user_id
            ).first()
            if existing_user:
                raise ValueError("Email already taken")
        
        # Update user
        for field, value in update_data.items():
            setattr(user, field, value)
        
        db.commit()
        db.refresh(user)
        
        user_response = UserResponse.model_validate(user)
        user_response.display_name = self._get_display_name(user)
        return user_response
    
    async def delete_user(self, db: Session, user_id: int):
        """Delete user account (soft delete)"""
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise ValueError("User not found")
        
        # Soft delete by deactivating
        user.is_active = False
        db.commit()


### MODIFIED FILE: Backend/app/utils/security.py
from passlib.context import CryptContext
from jose import JWTError, jwt
from fastapi import HTTPException, status, Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
from app.database import get_db
from app.config import get_settings
from app.schemas import UserResponse
import logging
import re

settings = get_settings()
logger = logging.getLogger(__name__)

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Security scheme
security = HTTPBearer()

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

def validate_password_strength(password: str) -> dict:
    """
    Validate password meets requirements:
    - At least 6 characters
    - At least 1 uppercase letter
    - At least 3 numbers
    
    Returns dict with 'valid' (bool) and 'errors' (list)
    """
    errors = []
    
    if len(password) < 6:
        errors.append("Password must be at least 6 characters long")
    
    if not re.search(r'[A-Z]', password):
        errors.append("Password must contain at least 1 uppercase letter")
    
    number_count = len(re.findall(r'\d', password))
    if number_count < 3:
        errors.append(f"Password must contain at least 3 numbers (found {number_count})")
    
    return {
        'valid': len(errors) == 0,
        'errors': errors
    }

def create_access_token(data: dict, expires_delta: timedelta = None) -> str:
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
    return encoded_jwt

def _get_display_name(user) -> str:
    """Helper function to get display name"""
    if user.alias:
        return user.alias
    return f"{user.name} {user.surname}"

async def get_current_user(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Session = Depends(get_db)
) -> UserResponse:
    """Get current authenticated user"""
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        # Extract token from credentials
        token = credentials.credentials
        
        # Decode JWT token
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        user_id_str: str = payload.get("sub")
        if user_id_str is None:
            raise credentials_exception
        
        # Convert to integer
        user_id = int(user_id_str)
            
    except (JWTError, ValueError):
        raise credentials_exception
    
    # Get user from database by ID
    from app.models import User
    user = db.query(User).filter(User.id == user_id).first()
    if user is None:
        raise credentials_exception
    
    if not user.is_active:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Inactive user"
        )
    
    user_response = UserResponse.model_validate(user)
    user_response.display_name = _get_display_name(user)
    return user_response


